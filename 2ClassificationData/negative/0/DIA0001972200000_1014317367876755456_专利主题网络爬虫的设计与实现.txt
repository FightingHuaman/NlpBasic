专利主题网络爬虫系统的设计与实现








ABSTRACT
为了给基于专利知识的计算机辅助产品创新设计提供知识来源，针对美国专利商标局（USPTO）的专利信息，设计并开发了一种专利主题网络爬虫，给出主题爬虫的总体设计和工作流程，包括基本功能架构、系统关键技术；在专利主题相关性判别上，提出基于句向量（Doc2Vec）的专利短文本相似度计算方法，有效筛选所需专利数据。实验结果表明，该主题网络爬虫具有较高的获取效率和适用性。 
Keywords
专利主题爬虫；Doc2Vec；专利；短文本相似度
1. INTRODUCTION
创新设计是人类在已有知识的基础上，利用自己的创造力设计出具有新颖性、实用性以及科学性的产品，不断推动产品和工业科技的发展。专利文献作为知识的重要载体，蕴含着大量的新结构、新技术和新原理等知识，已经成为许多国家和企业进行创新设计的重要知识来源。据统计，世界上80%以上的科技信息首先在专利文献中出现，90%~95%的发明能在专利文献中找到[1]。面对海量的专利知识，为了快速、高效、准确地采集并筛选所需数据，减少人工劳动在获取专利数据集工作中的比例，使设计人员快速地获取所需的相关专利[2]已经成为一个重要的研究方向。网络爬虫是信息获取中不可获取的一部分[3]，因此需要构建有效和稳健的爬虫来进行专利资源的获取。在主题网络爬虫开发方面，文献[4]设计并实现了一个分布式语义web爬虫，其中有一个页面分析器的组件被用来理解页面内容的主题和页面中锚标签的上下文，可以指导爬虫进行特定领域的爬行；文献[5]使用页面的特定HTML元素来预测当前页面中具有未访问链接的所有页面的主题焦点,然后将已识别的页面根据它们与爬虫的主题相关性进行排序，以获得进一步的实际下载；张睿涵等[6]设计了一种专利网络爬虫，提高了爬取专利的精确率，但没有运用并行或者并发技术，不能有效利用计算机资源。本文设计并开发了一种专利主题网络爬虫，通过稳健的爬取流程与BeautifulSoup、PyQuery、正则表达式等页面解析技术，结合提出的专利筛选算法，提高专利数据获取的效率与准确率。
2. 爬虫系统架构
网络爬虫是IO密集型任务。本文采用异步IO的方法来解决长时间的IO等待。当爬虫需要执行一个耗时的IO请求时，它只发出IO指令，并不等待IO结果，然后继续执行其他IO请求；一段时间后，当IO返回结果时，再通知CPU进行处理。
专利筛选的主要功能是计算待爬取专利的主题相关度，筛选出符合用户设计需求的专利。传统的主题爬虫相关度计算的方法主要有基于内容评价的搜索策略[7]和基于链接分析[8][9]的搜索策略，但这两种方法都不适用于专利主题网络爬虫中。因此本文提出一种适用于专利主题网络爬虫的主题相关度计算方法，首先爬虫进行一次爬行，爬取包含专利URL、专利标题、专利申请号等字段的专利的初始信息并存入数据库，然后针对第一次爬取获得的结果开始第二次爬取。主要特点体现在：对第一次爬取获得的全部专利标题利用Doc2Vec模型训练向量，同时结合用户给定的设计需求进行文本相似度的计算，按照设定的阈值大小将符合条件的专利URL依次添加到待爬取专利URL集合当中。传统的基于网页内容的相关度计算方法，每遇到一个新的URL，就计算该网页内容与主题的相关度，如果将这种方法应用在专利主题爬虫中，只能利用单篇专利与主题之间的相关度，准确度较低，而且造成爬取效率的下降；如果将初始专利信息集合内的全部专利爬取下来后再进行主题相关度的计算，虽然可以大幅提高准确率，但已经不符合主题爬虫的定义和初衷。因此本文提出一种折中的主题相关度计算方法，将第一次爬行的结果作为全局专利信息指导第二次爬行，因此第二次爬行不用再分析网页内容，效率和准确度都做到提升。
本文设计的专利主题网络爬虫架构如图1所示
其运行过程为：
(1)用户提供检索关键词；
(2)将关键词作为参数封装成种子URL，解析初始页面获得爬取总量，结合异步IO进行专利URL集合的爬取并存入本地数据库，同时对URL集合进行去重；
(3)从本地专利数据库查询专利URL，结合专利筛选、页面解析以及异步IO对专利信息进行采集和解析，并存入本地数据库，同时对专利信息进行去重；
整个爬虫系统的关键模块为页面采集、页面解析和专利筛选，下面将进一步详细讨论。











图1 专利主题网络爬虫架构
3. 系统关键技术
3.1 页面采集和页面解析
页面采集和页面解析模块的工作是对于已经存入数据库的URL实现专利详情页提取与专利信息清洗和抽取，使得网页上用于展示的专利内容变成结构化、易于进行分析的文本信息。
页面采集流程的设计既能够保障爬虫的稳健性，使得整个爬行过程完整；也能够确保本文提出的专利筛选的可行性。整个采集流程分为两部分，首先由种子URL爬取全部包含专利URL、专利标题、专利申请号等字段的专利初始信息，并存入数据库，然后针对数据库中的专利标题进行主题相关度分析，将符合要求的URL添加到待爬取URL集合中，爬取专利信息并存入数据库。
Web页面解析的对象为专利名称、专利申请号、专利摘要、专利说明书和权利要求书，其中专利说明书又可以分成技术领域、背景技术、发明总览、附图说明、实施方案五部分。目前常用的网页解析方法有正则表达式、BeautifulSoup模块和PyQuery。其中正则表达式更容易适应网页结构的变化，但又存在难以构造、可读性差的问题；BeautifulSoup能够正确解析缺损的HTML，但存在解析速度较慢的问题；PyQuery能够通过选择器精确定位DOM树中的目标并进行操作，语法简单且功能强大。
     USPTO专利详情网页存在部分HTML格式不规范[10]，表现为：表示文本加粗的<B>标签大小写形式均存在；<BR>与<HR>单体标签没有以规范的形式存在等。以专利"DRIVING TOOL"，专利号20170057069为例，包含专利名称和专利申请号的部分HTML源码如下：
#包含专利申请号的HTML源码 
</TR>
</TABLE><HR><font size="+1">DRIVING TOOL</font>
#包含专利申请号的HTML源码
<TABLE WIDTH="100%">
<TR>
<TD ALIGN="LEFT" WIDTH="50%"><B>United States Patent Application</B>
</TD>
<TD ALIGN="RIGHT" WIDTH="50%"><B>20170057069</B>
</TD>
BeautifulSoup能够解析HTML并且得到一个相对完整的树对象，通过BeautifulSoup解析以上两段HTML，得到封闭且完善的HTML如下：
#修改之后包含专利名称的HTML
<html><head></head><body><hr/><font size="+1">DRIVING TOOL</font>
</body></html>
#修改之后包含专利申请号的HTML
<html><head></head><body><table width="100%">
<tbody><tr>
<td align="LEFT" width="50%"><b>United States Patent Application</b>
</td>
<td align="RIGHT" width="50%"><b>20170057069</b>
</td>
</tr></tbody></table></body></html>
因为USPTO网页结构长时间固定不变，且网页源码中"font"的属性值"+1"具有唯一性，因此可以将标签"<font size="+1">"作为专利名的检索标签，采用BeautifulSoup模块的find解析方法，对应的表达式为soup.find('font', size="+1").text；专利申请号所在的B标签是TABLE标签的后代，故而能够使用CSS的子选择器来定位元素，对应的表达式为"soup.select('body > table:nth-of-type(1)>tbody>tr:nth-of-type(1) > td:nth-of-type(2) > b')[0].text"；专利摘要、权利要求书和专利说明书文本所在标签既不含唯一属性值，也无法采取元素定位的方式来检索，包含专利摘要的源码如下：
<BR>
   <BR><CENTER><B>Abstract</B></CENTER>
   <P>
 A driving tool...
</P>
上述源码包含的P标签和BR标签均没有属性值，也无法用CSS选择器来定位元素，故采用正则表达式和PyQuery结合的方式提取。首先使用PyQury从HTML源码中提取出文本内容，过滤掉HTML标签等噪音信息，然后采用正则表达式中的前向搜索肯定模式和后向搜索肯定模式进行信息匹配。以专利摘要为例，正则表达式为" re.findall(r" (?<=Abstract)[\w\W]*?(?=Inventors)",text)[0]"，解析其他对象的正则表达式和上述类似。
3.2 专利筛选
Doc2Vec 或者叫做paragraph2vec, sentence embeddings，是一种非监督式算法，可以获得sentences/paragraphs/documents的向量表达，是word2vec的拓展。训练句向量的方法和词向量的方法非常类似。例如对于一个句子S: I love science，如果要预测句子中的单词love，不仅可以根据其他单词生成特征，也可以根据其他单词和句子来生成特征。每个段落/句子都被映射到向量空间中，每个单词同样被映射到向量空间。然后将段落空间和词向量级联或者求平均，得到特征，预测句子中下一个单词。这个句向量/段落向量也可以认为是一个单词，它的作用相当于是上下文的记忆单元或者是这个段落的主题。Doc2Vec可以将句子或者段落表示成向量的形式，从而应用在文本相似度分析[11]、情感分析[12]、推荐系统[13]等领域。
目前常见的关键词专利检索方式推送给用户大量包含无关信息的专利文献，用户很难从检索出来的专利中获取有利于进行创新设计[14]的专利。通常用文本匹配方法来衡量专利之间的技术相似性[15]。文献[16]使用协同过滤的方法分析专利技术，从而确定目标公司的应用技术。本文提出的相似度计算方法使用初次爬取的专利标题文本，训练Doc2Vec模型，结合设计需求，利用余弦相似度计算专利与设计需求之间的相似程度。
具体的步骤如下所描述：
（1）set；	 	  //设置检索词
 	get URL seed from ;  //将检索词封装成种子URL
（2） get initial URLs from page;	//从页面中爬取URL集合，包含专利标题等信息
（3） train the Doc2Vec model; 	//训练Doc2Vec模型，进行余弦相似度计算
（4） sort URLs;		 //根据相似度大小对URL进行排序
（5） find URL in URLs;		//在URL集合中查找URL
　　If ()	   //如果该URL的专利相似度大于阈值
     put URL to queue;		//放入待爬行队列
（6） else if ()	//如果该URL的专利相似度小于阈值
     abandon URL;	//直接丢弃该URL
（7） crawl queue     //爬行队列中的URL
有两点需要说明：
1）第（3）步中训练好Doc2Vec模型后保存到本地，进行文本预测时可以加载本地模型，节约时间，也可以添加新的数据来训练并更新模型。
2）Doc2Vect模型训练之前需要先确认所有参数。由于选取的专利文本为短文本，根据经验将窗口大小window设为3；生成的向量维度size的选取对模型有较大影响。本文由于时间有限，由经验设定初始size值，之后以相同步长为间隔不断增大size值，利用不同的size值进行多次试验，得到最优size值。
4. 系统实验与分析
为了验证本文提出的专利主题网络爬虫的合理性，本文设置实验一和实验二，采用Python作为爬虫开发语言，使用MongoDB数据库，系统环境为win10。
4.1 实验1
实验选取检索关键词hermetically-sealed和pressure组成三组检索表达式：
I.h-ermetically-sealed，
II.hermetically-sealed AND pressure,
III.hermetically-sealed AND ABST/pres-sure，
其中第一组是仅对hermetically-sealed进行全文检索；第二组是对hermetically-sealed和pressure同时进行全文检索；第三组是对hermetically-sealed进行全文检索，对pressure进行摘要检索。使用异步IO爬虫爬取专利并解析入库，图3是数据库中部分专利的字段内容，可用于后续工作，也可供用户进行检索查询。






图2数据库中部分专利的字段内容
本文采用解析率和爬取率评价异步IO爬虫的爬取效果，定义：解析率，爬取率，其中a表示准确提取全部专利字段的专利篇数，b表示目标网页所含全部专利篇数，c表示实际爬取并存入到数据库的专利篇数，爬取效果评估如表1所示：
表1异步IO爬虫爬取效果评估
No专利数量a/篇b/篇c/篇R/%G/%I362933903629362993.41100II250523272505250592.89100III23721923723792.40100
由实验结果可知，当专利数量不断增加时，爬虫的采集率始终为100%，解析率保持在90%以上的水平，表明该爬虫对目标网页的采集完整度为100%，但爬虫的解析率还存在提升的空间。经过人工抽样检查，发现解析错误的情况主要为如下两种：
1.专利说明书中不包含对应的字段，以抽样的提取不准确的专利20150051467和20170071966为例，这两个专利说明书中分别不存在发明总览和附图说明，故解析失败。
2.专利说明书中字段的名称超出了正则表达式的匹配范围，以抽样的提取不准确的专利20060179873为例，该专利实施方案的字段名不符合原先设置的正则表达式匹配范围，故解析失败。
完善正则表达式或者寻求其他好的解析方式是之后要研究的工作。
4.2 实验2
对专利筛选作评估，目前有设计需求如下：设计一种具有密封结构的容器，能够承受一定压力，适用于测量在海水下不同位置的水压值。用户给定检索关键词seal-structure和pressure组成检索表达式"seal structure AND pressure"在USPTP上查2001年至今的所有相关专利，共查得3039篇专利，首先爬取它们的URL集合并导入数据库，从数据库中获得专利标题集合的文档，对其预处理，然后训练Doc2vec模型并保存到本地，同时将设计需求进行向量化并加载本地模型，根据余弦相似度计算集合中每一篇专利与设计需求之间的相似度，按照设定的阈值0.5将符合条件的专利URL按照相似度从高到低添加到待爬取URL集合中，最后爬取专利信息并存入数据库中。
为了评估本文方法的优劣以及多重采样对筛选结果的影响，需要使用一定的评价指标进行评价。常用于文本检索评价的两个指标是查全率和查准率，对于检索结果的总体评价，常用的则是F指标。因此测试结果分别使用查全率、查准率和F指标进行评价。公式如下：
     查全率（Recall, R）:
     查准率（Precision，P）:
     其中：
     a为主题相关，并且相似度计算结果显示也主题相关的专利数;
     b为主题相关，但是相似度计算结果显示主题无关的专利数;
     c为主题无关，但是相似度计算结果显示主题相关的专利数;
     F指标公式如下：在Doc2Vec模型训练过程中，出于经验考虑，将窗口大小设为3，size的取值依次为50，100，
150，200，250，300，350利用不同size值进行多次试验，确定最优size值。











     图3不同size值的试验结果
从图4中可以看出当size为150时，F值最高，因此我们选定的最优size值为150，使得用户能够获得符合设计需求的专利集。
5. 结语
本文设计并开发了基于异步的专利主题网络爬虫，在一定范围内实现了专利的自动获取。首先用户给定检索关键词以及设计需求，爬虫通过分析USPTO网页结构，结合异步IO、BeautifulSoup、PyQuery、正则表达式等技术实现专利信息的采集和提取，同时基于Doc2Vec模型对专利计算主题相关度，过滤与主题无关专利，为之后深入挖掘、分析专利信息提供了重要知识来源。在将来的研究中，会考虑扩大专利数据库来源，例如EPT、JPO以及中文专利数据库。此外，提高爬虫的网页解析率以及开发分布式爬虫[17]需要研究的问题。




















